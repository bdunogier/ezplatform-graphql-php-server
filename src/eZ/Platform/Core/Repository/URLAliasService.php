<?php

/**
 * File containing the URLAliasService class.
 *
 * @copyright Copyright (C) eZ Systems AS. All rights reserved.
 * @license For full copyright and license information view LICENSE file distributed with this source code.
 */
namespace App\eZ\Platform\Core\Repository;

use App\eZ\Platform\API\Repository\URLAliasService as APIURLAliasService;
use App\eZ\Platform\API\Repository\Values\Content\Location;
use App\eZ\Platform\API\Repository\Values\Content\URLAliasRef;
use App\eZ\Platform\API\Repository\Values\Content\URLAliasRefList;
use App\eZ\Platform\Core\Repository\RequestParser;
use App\eZ\Platform\Core\Repository\Input\Dispatcher;
use App\eZ\Platform\Core\Repository\Output\Visitor;

/**
 * Implementation of the {@link \App\eZ\Platform\API\Repository\URLAliasService}
 * interface.
 *
 * @see \App\eZ\Platform\API\Repository\URLAliasService
 */
class URLAliasService implements APIURLAliasService, Sessionable
{
    /** @var \App\eZ\Platform\Core\Repository\HttpClient */
    private $client;

    /** @var \App\eZ\Platform\Core\Repository\Input\Dispatcher */
    private $inputDispatcher;

    /** @var \App\eZ\Platform\Core\Repository\Output\Visitor */
    private $outputVisitor;

    /** @var \App\eZ\Platform\Core\Repository\RequestParser */
    private $requestParser;

    /**
     * @param \App\eZ\Platform\Core\Repository\\Symfony\Contracts\HttpClient\HttpClientInterface $ezpRestClient
     * @param \App\eZ\Platform\Core\Repository\Input\Dispatcher $inputDispatcher
     * @param \App\eZ\Platform\Core\Repository\Output\Visitor $outputVisitor
     * @param \App\eZ\Platform\Core\Repository\RequestParser $requestParser
     */
    public function __construct(\Symfony\Contracts\HttpClient\HttpClientInterface $ezpRestClient, Dispatcher $inputDispatcher, Visitor $outputVisitor, RequestParser $requestParser)
    {
        $this->client = $ezpRestClient;
        $this->inputDispatcher = $inputDispatcher;
        $this->outputVisitor = $outputVisitor;
        $this->requestParser = $requestParser;
    }

    /**
     * Set session ID.
     *
     * Only for testing
     *
     * @param mixed $id
     *
     * @private
     */
    public function setSession($id)
    {
        if ($this->outputVisitor instanceof Sessionable) {
            $this->outputVisitor->setSession($id);
        }
    }

    /**
     * Create a user chosen $alias pointing to $location in $languageCode.
     *
     * This method runs URL filters and transformers before storing them.
     * Hence the path returned in the URLAlias Value may differ from the given.
     * $alwaysAvailable makes the alias available in all languages.
     *
     * @param \App\eZ\Platform\API\Repository\Values\Content\Location $location
     * @param string $path
     * @param string $languageCode the languageCode for which this alias is valid
     * @param bool $forwarding if true a redirect is performed
     * @param bool $alwaysAvailable
     *
     * @throws \App\eZ\Platform\API\Repository\Exceptions\InvalidArgumentException if the path already exists for the given language
     *
     * @return \App\eZ\Platform\API\Repository\Values\Content\URLAlias
     */
    public function createUrlAlias(Location $location, $path, $languageCode, $forwarding = false, $alwaysAvailable = false)
    {
        throw new \Exception('@todo: Implement.');
    }

    /**
     * Create a user chosen $alias pointing to a resource in $languageCode.
     *
     * This method does not handle location resources - if a user enters a location target
     * the createCustomUrlAlias method has to be used.
     * This method runs URL filters and and transformers before storing them.
     * Hence the path returned in the URLAlias Value may differ from the given.
     *
     * $alwaysAvailable makes the alias available in all languages.
     *
     * @throws \App\eZ\Platform\API\Repository\Exceptions\InvalidArgumentException if the path already exists for the given
     *         language or if resource is not valid
     *
     * @param string $resource
     * @param string $path
     * @param string $languageCode
     * @param bool $forwarding
     * @param bool $alwaysAvailable
     *
     * @return \App\eZ\Platform\API\Repository\Values\Content\URLAlias
     */
    public function createGlobalUrlAlias($resource, $path, $languageCode, $forwarding = false, $alwaysAvailable = false)
    {
        throw new \Exception('@todo: Implement.');
    }

    /**
     * List of url aliases pointing to $location, sorted by language priority.
     *
     * @param \App\eZ\Platform\API\Repository\Values\Content\Location $location
     * @param bool $custom if true the user generated aliases are listed otherwise the autogenerated
     * @param string $languageCode filters those which are valid for the given language
     *
     * @return \App\eZ\Platform\API\Repository\Values\Content\URLAlias[]
     */
    public function listLocationAliases(Location $location, $custom = true, $languageCode = null)
    {
        $response = $this->client->request(
            'GET',
            $location->references['urlAliases']['_href'],
            [
                'query' => ['custom' => 'false'],
                'headers' => ['accept' => $location->references['urlAliases']['_media-type']],
            ]
        );

        $refList = $this->inputDispatcher->parse($response);

        if (!$refList instanceof UrlAliasRefList) {
            throw new \Exception("@todo fixme");
        }

        return array_map(
            function(URLAliasRef $ref) {
                return $this->inputDispatcher->parse(
                    $this->client->request(
                        'GET',
                        $ref->href,
                        ['headers' => ['accept' => $ref->mediaType]]
                    )
                );
            },
            $refList->refList
        );
    }

    /**
     * List global aliases.
     *
     * @param string $languageCode filters those which are valid for the given language
     * @param int $offset
     * @param int $limit
     *
     * @return \App\eZ\Platform\API\Repository\Values\Content\URLAlias[]
     */
    public function listGlobalAliases($languageCode = null, $offset = 0, $limit = -1)
    {
        throw new \Exception('@todo: Implement.');
    }

    /**
     * Removes urls aliases.
     *
     * This method does not remove autogenerated aliases for locations.
     *
     * @throws \App\eZ\Platform\API\Repository\Exceptions\InvalidArgumentException if alias list contains
     *         autogenerated alias
     *
     * @param \App\eZ\Platform\API\Repository\Values\Content\URLAlias[] $aliasList
     */
    public function removeAliases(array $aliasList)
    {
        throw new \Exception('@todo: Implement.');
    }

    /**
     * looks up the URLAlias for the given url.
     *
     * @param string $url
     * @param string $languageCode
     *
     * @throws \App\eZ\Platform\API\Repository\Exceptions\NotFoundException if the path does not exist or is not valid for the given language
     *
     * @return \App\eZ\Platform\API\Repository\Values\Content\URLAlias
     */
    public function lookup($url, $languageCode = null)
    {
        throw new \Exception('@todo: Implement.');
    }

    /**
     * Returns the URL alias for the given location in the given language.
     *
     * If $languageCode is null the method returns the url alias in the most prioritized language.
     *
     * @throws \App\eZ\Platform\API\Repository\Exceptions\NotFoundException if no url alias exist for the given language
     *
     * @param \App\eZ\Platform\API\Repository\Values\Content\Location $location
     * @param string $languageCode
     *
     * @return \App\eZ\Platform\API\Repository\Values\Content\URLAlias
     */
    public function reverseLookup(Location $location, $languageCode = null)
    {
        throw new \Exception('@todo: Implement.');
    }

    /**
     * Loads URL alias by given $id.
     *
     * @throws \App\eZ\Platform\API\Repository\Exceptions\NotFoundException
     *
     * @param string $id
     *
     * @return \App\eZ\Platform\API\Repository\Values\Content\URLAlias
     */
    public function load($id)
    {
        throw new \Exception('@todo: Implement.');
    }

    /**
     * Refresh all system URL aliases for the given Location (and historize outdated if needed).
     *
     * @param \App\eZ\Platform\API\Repository\Values\Content\Location $location
     *
     * @throws \Exception
     */
    public function refreshSystemUrlAliasesForLocation(Location $location): void
    {
        throw new \Exception('@todo: Implement');
    }

    /**
     * Delete global, system or custom URL alias pointing to non-existent Locations.
     */
    public function deleteCorruptedUrlAliases(): int
    {
        throw new \Exception('@todo: Implement');
    }
}
